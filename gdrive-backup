#!/bin/bash

# flag
# e - Exit if any error
# u - Treat unset variables as an error when substituting
# o pipefail - the return value of a pipeline is the status of the last command to exit with a non-zero status or zero if no command exited with a non-zero status
# E - the ERR trap is inherited by shell functions
set -Eeuo pipefail

######################################
# Base
#####################################
CLI_NAME=$(basename "$0") # Name of the cli

# Echo a message
# Accept as first argument a flag --silent or -s to no echo anything
function echo_log() {

  for arg in "$@"; do
        case "$arg" in
        "--silent"|"-s")
          return
          ;;
        "")
          # empty arg
        ;;
        *)
          echo -e "$CLI_NAME: ${arg:-}"
          ;;
        esac
  done


}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function finish() {
  echo_log "\n$CLI_NAME Script terminated\n"
}

trap finish EXIT

######################################
# Usage
#####################################
function help() {

  echo ""
  echo "Usage of the cli ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} [RESTIC_OPTIONS] GDRIVE_PATH [--help]"
  echo ""
  echo "where:"
  echo "  * RESTIC_OPTIONS   are restic backup option"
  echo "  * GDRIVE_PATH is the Google Drive Path of a Directory or File to backup"
  echo ""
  echo ""
  echo "To get help"
  echo ""
  echo "   ${CLI_NAME} --help"
  echo ""

}

# Assign all arguments to an array
args=("$@")

# Check if no arguments were passed
if [ "$#" -eq 0 ]; then
  help
  exit 1
fi

# Get the last argument
GDRIVE_DIRECTORY_TO_BACKUP="${args[-1]}"
if [ "$GDRIVE_DIRECTORY_TO_BACKUP" == "" ]; then
  echo_err "A Google Drive directory to backup is mandatory. For instance, a backslash / for the whole drive."
  help
  exit 1
fi

# Get all arguments except the last one
RESTIC_OPTIONS=("${args[@]::${#args[@]}-1}")

# Check for help
for arg in "$@"; do
  if [ "$arg" == "--help" ];then
      help
      exit
  fi
done

# Make RESTIC AWS secret, AWS environment
RESTIC_AWS_SECRET_ACCESS_KEY=${RESTIC_AWS_SECRET_ACCESS_KEY:-}
if [ "$RESTIC_AWS_SECRET_ACCESS_KEY" != "" ] && [ "$AWS_SECRET_ACCESS_KEY" == "" ]; then
  export AWS_SECRET_ACCESS_KEY="$RESTIC_AWS_SECRET_ACCESS_KEY";
fi
RESTIC_AWS_ACCESS_KEY_ID=${RESTIC_AWS_ACCESS_KEY_ID:-}
if [ "$RESTIC_AWS_ACCESS_KEY_ID" != "" ] && [ "$AWS_ACCESS_KEY_ID" == "" ]; then
  export AWS_ACCESS_KEY_ID="$RESTIC_AWS_ACCESS_KEY_ID";
fi

# In a container, the host changes continuously
# We set it here
RESTIC_HOST=${RESTIC_HOST:-gdrive}

# Mount
if mount | grep "${GDRIVE_MOUNT_PATH} type fuse.rclone" > /dev/null; then
  echo_log "Gdrive is already mounted at ${GDRIVE_MOUNT_PATH}"
else
  if [ -n "$(ls -A "$GDRIVE_MOUNT_PATH")" ]; then
      echo_err "Google Drive Mount Directory ($GDRIVE_MOUNT_PATH) is not empty."
      exit 1
  fi
  echo_log "Mounting ${GDRIVE_MOUNT_PATH} as a GDrive fuse file system."
  RCLONE_MOUNT_COMMAND="rclone mount gdrive: $GDRIVE_MOUNT_PATH --daemon"
  echo_log "Rclone Mount Command: $RCLONE_MOUNT_COMMAND"
  eval "$RCLONE_MOUNT_COMMAND"
fi


# Backup
# We pass the whole
BACKUP_COMMAND="restic backup --host $RESTIC_HOST ${RESTIC_OPTIONS[*]} $GDRIVE_MOUNT_PATH$GDRIVE_DIRECTORY_TO_BACKUP"
echo_log "Backup Command: $BACKUP_COMMAND"
eval "$BACKUP_COMMAND"
